networks:
  express-network:
    driver: bridge
  nest-network:
    driver: bridge

services:
  mongo-db:
    image: mongo:latest
    container_name: mongo-db
    restart: unless-stopped
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - mongo-db-data:/data/db
    env_file:
      - ./.env
  redis:
    image: redis:latest
    working_dir: /data
    restart: unless-stopped
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    env_file:
      - ./.env
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # express:
  #   build:
  #     context: ./microservices/expressApp
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - nest
  #   volumes:
  #     - npm-cache:/root/.npm
  #   networks:
  #      - express-network
  #   env_file:
  #     - ./.env
  # nest:
  #   build:
  #     context: ./microservices/nest-app
  #     dockerfile: Dockerfile
  #   volumes:
  #     - npm-cache:/root/.npm

  #   depends_on:
  #     - redis
  #     - mongo-db
  #     - postgres
  #   networks:
  #      - nest-network
  #   env_file:
  #     - ./.env 

volumes:
  postgres-data:
  mongo-db-data:
  redis-data:
